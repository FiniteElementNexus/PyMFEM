INSTALL

PyMFEM is a Python wrapper for the mfem (Modular Finite Element Method) library.

This wrapper is built by parsing mfem header file by SWIG, and therefore, it is
strongly recommended to use the same vaersion of the mfem library from which the
wrapper c++ code is generated. The version of mfem is noted at the beginning of
README.

PyMFEM contains wrappor for parallel mfem 
(mfem.par module) and serial mfem (mfem.ser module). Each module must be
linked with parallel and serial shared MFEM library. This install guide describes
a procedure to install MFEM as the dynamic link library and to setup 
PyMFEM to be linked with the newly build MFEM library. A user need cmake
to follow the instruction. Additinally, please note that
the parallel version of MFEM requires Hypre and METIS-5 to be installed
too, which is not covered in this document. This document assumes linux
like enviroment including MacOS X (tested on Seirra and highSierra)

It assumes that a user will install everything under $MFEM_PREFIX
in $MFEM_PREFIX

   export MFEM_PREFIX = /usr/local

1) building MFEM as so (or dylib in MacOSX).

1-1) download mfem and expaned
   > mkdir -p $MFEM_PREFIX/src
   > cd $MFEM_PREFIX/src 
   > git clone git@github.com:mfem/mfem.git
   > git checkout <proper git commit SHA>

1-2) build serial MFEM using cmake
     Note DMFEM_USE_EXCEPTIONS=1 allows to throw an python exception instead of aborting.
     This option saves python interpreter from crash. Using this option in parallel is questionable, since mfem error may happen only some of computing processes.

   > cd $MFEM_PREFIX/src/mfem	
   > mkdir cmbuild_ser
   > cd cmbuild_ser
   > cmake .. -DCMAKE_VERBOSE_MAKEFILE=1 -DBUILD_SHARED_LIBS=1 -DCMAKE_INSTALL_PREFIX=$MFEM_PREFIX/mfem-git/ser -DMFEM_ENABLE_EXAMPLES=1 -DMFEM_USE_EXCEPTIONS=1
   > make verbose=1
   > make install

1-2a) (Max Only) MacOSX user may need to set install-name of library using intall_name_tool
   > cd $MFEM_PREFIX/mfem/ser/lib
   > install_name_tool -id $MFEM_PREFIX/mfem/ser/lib/libmfem.3.3.3.dylib libmfem.3.3.3.dylib

1-2b) test MFEM by checking if example is built correctly
   > example/ex1

1-2c) instlal serial MFEM to $MFEM_PREFIX/mfem/ser

   Set CXX11FLAG to use c++11 and run make install
   > export CXX11FLAG=-std=c++11
   > make install


1-3) build parallel MFEM using cmake

1-3a) make cmake working directory

   > cd $MFEM_PREFIX/src/mfem
   > mkdir cmbuild_par
   > cd cmbuild_par

1-3b) run cmake 
   Here we build parallel MFEM linked with Hypre and METIS-5. If not, please install them first as the dinamic link library. Then export the location as follows

   > export HYPRELIB  = (set to a directry where libHYPRE.so is placed)
   > export HYPREINC  = (set to a directry where HYPRE.h)
   > export MESI5LIB  = (set to a directry where libmetis.so is placed)
   > export METIS5INC = (set to a directry where metis.h)
   > export MPICXX = (set to MPI C++ compiler, such as  mpicxx, mpiicpc)

and run cmake and build.

   > cmake .. -DCMAKE_VERBOSE_MAKEFILE=1 -DBUILD_SHARED_LIBS=1 -DCMAKE_INSTALL_PREFIX=$MFEM_PREFIX/mfem-git/par -DHYPRE_DIR=$HYPRELIB -DHYPRE_INCLUDE_DIRS=$HYPREINC  -DMETIS_DIR=$METIS5LIB -DMETIS_INCLUDE_DIRS=$METIS5INC -DMFEM_USE_MPI=1 -DMFEM_USE_METIS_5=1 -DMFEM_ENABLE_EXAMPLES=1 -DCMAKE_CXX_COMPILER=$MPICXX -DCMAKE_SHARED_LINKER_FLAGS="-L$HYPRELIB -lHYPRE -L$METIS5LIB -lmetis" -DCMAKE_EXE_LINKER_FLAGS="-L$HYPRELIB -lHYPRE -L$METIS5LIB -lmetis"

   or
   
   > cmake .. -DCMAKE_VERBOSE_MAKEFILE=1 -DBUILD_SHARED_LIBS=1 -DCMAKE_INSTALL_PREFIX=$MFEM_PREFIX/mfem-git/par -DHYPRE_DIR=$HYPRELIB -DHYPRE_INCLUDE_DIRS=$HYPREINC  -DMETIS_DIR=$METIS5LIB -DMETIS_INCLUDE_DIRS=$METIS5INC -DMFEM_USE_MPI=1 -DMFEM_USE_METIS_5=1 -DMFEM_ENABLE_EXAMPLES=1 -DCMAKE_CXX_COMPILER=$MPICXX -DCMAKE_SHARED_LINKER_FLAGS="-L$HYPRELIB -lHYPRE -L$METIS5LIB -lmetis" -DCMAKE_EXE_LINKER_FLAGS="-L$HYPRELIB -lHYPRE -L$METIS5LIB -lmetis" -DCMAKE_INSTALL_RPATH=$HYPRELIB:$METIS5LIB -DCMAKE_BUILD_WITH_INSTALL_RPATH=TRUE

Note that libmfem.so built by the first cmake does not know the location of
libHYPRE.so and libmetis.so, and a user may have to use LD_LIBRARY_PATH to
specify the location of library. i these libraries are not installed in the
default library search path. The second cmake command instead write the
location of these libraires in the rpath of .so file.

Then run make.
   > make verbose=1

1-3c) test MFEM by checking if example is built correctly. However, if your cluster requires to submit a parallel job using a batch system, you need to write a batch job file.
   > example/ex1p

1-3d) instlal parallel MFEM

   Set CXX11FLAG to use c++11 and run make install
   > export CXX11FLAG=-std=c++11
   > make install



2) Install PyMFEM.

2-1) Donwload PyMFEM
You may already downloaded PyMFEM package, but here is a step to do it

   > cd $MFEM_PREFIX/src
   > git clone git@github.com:mfem/PyMFEM.git   
   > cd PyMFEM

2-2) Prepare Makefile.local. Copy a template and edit it. A usre needs to
set the location of MPI library and boost library. MPI is not necessary
for the serial version build

   > cp Makefile_templates/Makefile.local.shared Makefile.local

2-3) make serial

If you need, set compiler using export
   > export CC = (set to c compiler)
   > export CXX = (set to c++ compiler)

Run make
   > make ser

2-3) make parallel PyMFEM
If you need, set compiler using export
   > export MPICXX = (set to MPI C++ compiler, such as  mpicxx, mpiicpc)
   > export MPICC = (set to MPI C compiler)

Run make
   > make par

2-3) install PyMFEM

   > make pyinstall
   or 
   > make pyinstall PREFIX=$MFEM_PREFIX
   or 
   > make pyinstall PREFIX=(other install location)

By default (1st one), make will install PyMFEM in /usr/local/lib/python2.7/site-packages/.
In the second command, it installs files in $(MFEM_PREFIX)/lib/python2.7/site-packages/PyMFEM-3.3.3rc0-py2.7.egg


3) run example
If you install PyMFEM to a new site-package directory, you need to add the
directory to PYTHONPATH. 

  > export PYTHONPATH=<hogehogehoge>:$PYTHONPATH

Then, launch python and see if it import mfem

  > import mfem
  > import mfem.ser (serial)
  or
  > import mfem      
  > import mfem.par (parallel)
   
Many of example c++ programs in MFEM are converted in python and found in example 
directory. We recommend to run these examples in test directory, since they 
generate various files.

  > cd test
  > python ../example/ex1.py  (serial)
  > mpiexec -n 2 python ../example/ex1p.py (parallel)

You can clean the test directory using.
  > python test.py -clean

4) (optional) run test
   $ cd test
   $ python test.py -serial -mfemsdir $MFEM_PREFIX/src/mfem/cmbuild_ser -verbose
   $ python test.py -parallel -mfempdir $MFEM_PREFIX/src/mfem/cmbuild_par -verbose


   this script runs all example python script and corresponding
   C++ verison and compare the text output. It will report if
   there is siginficant difference in output.

   Possible fail reason:
      Bug ;D
      Conversgence of iterative solver depends on the intial
      condition...?
      ex7p fails although the glvis shows the same plot...

  
