name: InTest

on:
  pull_request_target:
    types:
      - labeled
  #push:
  #  branches: [ test ]
  #pull_request:
  #  branches: [ test ]
  #  types: [synchronize]

jobs:
  build:
    if: contains(github.event.pull_request.labels.*.name, 'in-test')  
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10]
        #os: [ubuntu-latest]
        os: [ubuntu-20.04]
        # USE_FLAGS :  cuda, parallel, libceed
        env:
           - { USE_FLAGS: "000"}
           - { USE_FLAGS: "100"}
           - { USE_FLAGS: "010"}
           - { USE_FLAGS: "110"}

        include:
           - os: macos-latest
             python-version: 3.9
             env: {USE_FLAGS: "000"}
           - os: [ubuntu-20.04]
             python-version: 3.9
             env: {USE_FLAGS: "001"}
#
    runs-on: ${{ matrix.os }}	   
    #env: ${{ matrix.env }}
    env: 
       USE_FLAGS: ${{ matrix.env.USE_FLAGS }}
       CUDA: "11.5"
       SANDBOX: ~/sandbox

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel

        mkdir -p ~/sandbox/lib
        PYTHONLIB=~/sandbox/lib/python${{ matrix.python-version }}/site-packages
        export PYTHONPATH=$PYTHONLIB:$PYTHONPATH
        echo $PYTHONPATH

        if [ -f requirements.txt ]; then
           pip install -r requirements.txt --prefix=~/sandbox
        fi
        python -c "import numpy;print(numpy.__file__)"	

        if [ "${USE_FLAGS:0:1}" = "1" ] ; then
            echo $cuda
            source ./ci_scripts/add_cuda_11_5.sh;
        fi
        if [ "${USE_FLAGS:1:1}" = "1" ] ; then
            sudo apt-get install mpich;
            sudo apt-get install libmpich-dev;
            pip install mpi4py --no-cache-dir --prefix=~/sandbox;

            python -c "import mpi4py;print(mpi4py.get_include())";	    
        fi
        ls -l $PYTHONLIB	
        
    - name: Build
      run: |
        export PATH=/usr/local/cuda-${CUDA}/bin:$PATH
        PYTHONLIB=~/sandbox/lib/python${{ matrix.python-version }}/site-packages	
        export PYTHONPATH=$PYTHONLIB:$PYTHONPATH
        echo $PATH
        echo $PYTHONPATH
        echo $SANDBOX
        if [ "${USE_FLAGS}" = "000" ]; then  
           python setup.py install --prefix=$SANDBOX
        fi
        if [ "${USE_FLAGS}" = "010" ]; then
           python setup.py install --with-parallel --prefix=$SANDBOX
        fi
        if [ "${USE_FLAGS}" = "100" ]; then
           ls -l /usr/local/cuda-${CUDA}/include
           python setup.py install --with-cuda --prefix=$SANDBOX
        fi
        if [ "${USE_FLAGS}" = "110" ]; then
           python setup.py install --with-cuda --with-parallel --prefix=$SANDBOX
        fi
        if [ "${USE_FLAGS}" = "001" ]; then
           python setup.py install --prefix=$SANDBOX --with-libceed	
        fi

    - name: EX1_RUN      
      run: |

        export PATH=/usr/local/cuda-${CUDA}/bin:$PATH
        PYTHONLIB=~/sandbox/lib/python${{ matrix.python-version }}/site-packages	
        export PYTHONPATH=$PYTHONLIB:$PYTHONPATH
        echo $PATH
        echo $PYTHONPATH
        echo $SANDBOX
        cd test
        echo $PATH
        echo $PYTHONPATH
        if [ "${USE_FLAGS}" = "000" ]; then  
           python ../examples/ex1.py
           python ../examples/ex9.py
        fi
        if [ "${USE_FLAGS}" = "010" ]; then
           which mpicc
           mpirun -np 2 python ../examples/ex1p.py
        fi
        if [ "${USE_FLAGS}" = "100" ]; then
           python ../examples/ex1.py --pa
        fi
        if [ "${USE_FLAGS}" = "110" ]; then
           mpirun -np 2 python ../examples/ex1.py --pa
        fi
        if [ "${USE_FLAGS}" = "001" ]; then
           python ../examples/ex1.py -d ceed-cpu
           python ../examples/ex9.py -d ceed-cpu	   
        fi
